/*Contains all middleware code*/
/*Passport helps us authenticate users*/
const express = require('express');
const morgan = require('morgan');
const cors = require('cors');
const path = require('path');
const helmet = require('helmet');
const passport = require('passport');
const {Strategy} = require('passport-google-oauth20');
const { builtinModules } = require('module');
const cookieSession = require('cookie-session');
const jwt = require('jsonwebtoken');

require('dotenv').config({path: __dirname + '/.env'});

// const {} = require('routes/login/login/router')
const LeaderBoardRouter = require('./routes/round/round.router');
const HallOfFameRouter = require('./routes/bestRound/bestRound.router');
const PowerUpRouter = require('./routes/powerUp/powerUp.router');


const config = {
  CLIENT_ID: process.env.CLIENT_ID,
  CLIENT_SECRET: process.env.CLIENT_SECRET,
  COOKIE_KEY_1: process.env.COOKIE_KEY_1,
  COOKIE_KEY_2: process.env.COOKIE_KEY_2
};

const AUTH_OPTIONS = {
  callbackURL: 'https://localhost:9000/auth/google/callback', //is send to google, such that google knows which end point the authorization code needs to be send to
  clientID: config.CLIENT_ID,
  clientSecret: config.CLIENT_SECRET
}


const app = express();

app.use(cors({
    origin: 'https://localhost:4000',
    optionsSuccessStatus: 200,
    credentials: true,
}));

//logging system
app.use(morgan('combined'));

//with this function we can compare users password to a password in our database
function verifyCallback(accessToken, refreshToken, expires_in, profile, done){ //Strategy takes in all these arguments
  console.log('Google profile', profile); //if we received an acces token, we know that the credentials are valid
  try{
    const userResponse = {
    ...profile,
    accessToken,
    refreshToken,
    expires_in
    }
    done(null, userResponse); //passport now knows that this user is logged in
  }
  catch(err){
    done(err, null, {message: 'An error occured trying to authenticate the user'})
  }
}


//passport strategy needs to be set right before middelware chain
passport.use(new Strategy(AUTH_OPTIONS, verifyCallback)) //passport will help us go through the oath flow, so we don't need to keep track of all the requests to google servers and responses

// save session to cookie
passport.serializeUser((user, done) => {
  done(null, user);
})

// reading session from cookie
passport.deserializeUser((user, done) => {

  //client side
  done(null, user);
})


app.use(helmet()); //secures all end points by protecting against common configuration issues

app.use(cookieSession({
  name: 'session',
  maxAge: 24* 60 * 60 * 1000, //duration of session,
  keys: [ config.COOKIE_KEY_1, config.COOKIE_KEY_2 ] //list of secret values that keep cookie secure -> should generated by random generator, changing value will invalidate all exisiting sessions
        //adding a second key saves all current sessions, if we are sure that all new logins are signed with new key, you can remove the old one form the array
}))

app.use(passport.initialize()); //helps set up passport session
app.use(passport.session()); //authenticates session

function checkLoggedIn(req, res, next){
  console.log('Current user is: ', req.user)
  const isLoggedIn = req.isAuthenticated() && req.user; // if value is populated, it is true
  if (!isLoggedIn)
  {
    return res.status(401).json({
      error: 'You must log in!',
    });
  }
  console.log(req.headers)
  next(); //if next is called, user gets access to other parts of our server
  //We don't want the user to get acces to our html however
}

///auth/google endpoint is used to initiate the authentication process with the Google OAuth 2.0 provider
app.get('/auth/google',
    passport.authenticate('google', {
        scope: ['email'], //which data we request from google when everything succeeds
    })
); //authentication and consent

app.get('/auth/google/callback', 
  passport.authenticate('google', {
  failureRedirect: 'https://localhost:4000/', //redirects user to failed login page
  //successRedirect: 'https://localhost:4000/LoginPage', //redirects user to success login page
  session: true, //sets session
  }), 
  (req, res) => {
    console.log('check')
    res.redirect('https://localhost:4000/LoginPage')//?access_token='+req.user.accessToken)
}
); //callback is the authorization code response, which gets the acces token

app.get('/auth/logout', (req, res) => {
  req.logout(); //removes req.user and clears any logged in session
  return res.redirect('/');
}); //logout is not bound to any provider, such that we don't need to include google

app.get('/LoginPage', checkLoggedIn, (req, res) => { //checkPermissions checks which permission a logged in user has
  return res.send('Your personal secret value is 42')
});

app.get('/Failure', (req, res) => {
    return res.send('Failed to log in');
})

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.use(express.json());
app.use(express.static(path.join(__dirname, '..', '..', 'client', 'public')));

app.use('/LeaderBoard', LeaderBoardRouter);
app.use('/HallOfFame', HallOfFameRouter);
app.use('/PowerUp', PowerUpRouter);


app.get('/*', (req, res) => {
    res.sendFile(path.join(__dirname, '..', '..', 'client', 'public', 'index.html'));

});

module.exports = app;